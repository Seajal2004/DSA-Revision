class MedianFinder {
public:
    priority_queue<int> maxHeap; // left side (smaller half)
    priority_queue<int, vector<int>, greater<int>> minHeap; // right side (larger half)

    MedianFinder() {
    }

    void addNum(int num) {
        // Add to maxHeap first
        maxHeap.push(num);
        
        // Move the largest from maxHeap to minHeap
        minHeap.push(maxHeap.top());
        maxHeap.pop();

        // Balance sizes: maxHeap can have one more element
        if (minHeap.size() > maxHeap.size()) {
            maxHeap.push(minHeap.top());
            minHeap.pop();
        }
    }

    double findMedian() {
        if (maxHeap.size() > minHeap.size()) {
            return maxHeap.top();
        } else {
            return (maxHeap.top() + minHeap.top()) / 2.0;
        }
    }
};
