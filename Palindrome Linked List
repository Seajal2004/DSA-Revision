//Palindrome Linked List

class Solution {
public:
    ListNode* reverse(ListNode* head){
        if(head == NULL || head->next == NULL) return head;  
        ListNode* newhead = reverse(head->next);
        ListNode* front = head->next;
        front->next = head;
        head->next = NULL;
        return newhead;
    }

    bool isPalindrome(ListNode* head) {
        ListNode* slow = head;
        ListNode* fast = head;
        while(fast->next != NULL && fast->next->next != NULL){
            slow = slow->next;
            fast = fast->next->next;
        }

        ListNode* newhead = reverse(slow->next);
        ListNode* first = head;
        ListNode* second = newhead;  

        while(second != NULL){  
            if(first->val != second->val){  
                reverse(newhead);
                return false;
            }
            first = first->next;
            second = second->next;
        }

        reverse(newhead);
        return true;  
    }
};
